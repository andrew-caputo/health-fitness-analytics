#!/usr/bin/env python3
"""
Comprehensive test script to verify AI endpoints are working
"""

import sys
import os
import asyncio
import traceback

# Add the backend directory to the Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_ai_imports():
    """Test that all AI modules can be imported"""
    try:
        print("Testing AI module imports...")
        
        # Test core AI modules
        from backend.ai.health_insights_engine import health_insights_engine, HealthInsight, HealthScore
        print("‚úÖ health_insights_engine imported successfully")
        
        from backend.ai.goal_optimizer import GoalOptimizer, GoalDifficulty
        print("‚úÖ goal_optimizer imported successfully")
        
        from backend.ai.achievement_engine import AchievementEngine, Achievement, AchievementType, BadgeLevel, CelebrationLevel
        print("‚úÖ achievement_engine imported successfully")
        
        from backend.ai.health_coach import HealthCoach
        print("‚úÖ health_coach imported successfully")
        
        from backend.ai.recommendation_engine import RecommendationEngine
        print("‚úÖ recommendation_engine imported successfully")
        
        from backend.ai.anomaly_detector import AnomalyDetector
        print("‚úÖ anomaly_detector imported successfully")
        
        from backend.ai.pattern_recognition import PatternRecognizer
        print("‚úÖ pattern_recognition imported successfully")
        
        from backend.ai.correlation_analyzer import CorrelationAnalyzer
        print("‚úÖ correlation_analyzer imported successfully")
        
        # Test ai_insights import
        from backend.api.v1.endpoints import ai_insights
        print("‚úÖ ai_insights endpoint imported successfully")
        
        # Test router exists
        if hasattr(ai_insights, 'router'):
            print("‚úÖ ai_insights.router exists")
            
            # Check routes
            routes = [route.path for route in ai_insights.router.routes if hasattr(route, 'path')]
            print(f"‚úÖ Found {len(routes)} routes in ai_insights router:")
            for route in routes:
                print(f"   - {route}")
        else:
            print("‚ùå ai_insights.router not found")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå Error importing AI modules: {e}")
        traceback.print_exc()
        return False

def test_ai_engine_initialization():
    """Test that AI engines can be initialized"""
    try:
        print("\nTesting AI engine initialization...")
        
        from backend.ai.goal_optimizer import GoalOptimizer
        goal_optimizer = GoalOptimizer()
        print("‚úÖ GoalOptimizer initialized successfully")
        
        from backend.ai.achievement_engine import AchievementEngine
        achievement_engine = AchievementEngine()
        print("‚úÖ AchievementEngine initialized successfully")
        
        from backend.ai.health_coach import HealthCoach
        health_coach = HealthCoach()
        print("‚úÖ HealthCoach initialized successfully")
        
        from backend.ai.recommendation_engine import RecommendationEngine
        rec_engine = RecommendationEngine()
        print("‚úÖ RecommendationEngine initialized successfully")
        
        from backend.ai.anomaly_detector import AnomalyDetector
        anomaly_detector = AnomalyDetector()
        print("‚úÖ AnomalyDetector initialized successfully")
        
        from backend.ai.pattern_recognition import PatternRecognizer
        pattern_recognizer = PatternRecognizer()
        print("‚úÖ PatternRecognizer initialized successfully")
        
        from backend.ai.correlation_analyzer import CorrelationAnalyzer
        correlation_analyzer = CorrelationAnalyzer()
        print("‚úÖ CorrelationAnalyzer initialized successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error initializing AI engines: {e}")
        traceback.print_exc()
        return False

def test_database_models():
    """Test that database models can be imported and used"""
    try:
        print("\nTesting database models...")
        
        from backend.core.models import User, HealthMetricUnified, UserDataSourcePreferences
        print("‚úÖ Database models imported successfully")
        
        # Test model attributes
        user_attrs = ['id', 'email', 'hashed_password', 'created_at', 'updated_at']
        for attr in user_attrs:
            if hasattr(User, attr):
                print(f"‚úÖ User.{attr} exists")
            else:
                print(f"‚ùå User.{attr} missing")
                return False
        
        metric_attrs = ['id', 'user_id', 'metric_type', 'value', 'unit', 'timestamp', 'data_source']
        for attr in metric_attrs:
            if hasattr(HealthMetricUnified, attr):
                print(f"‚úÖ HealthMetricUnified.{attr} exists")
            else:
                print(f"‚ùå HealthMetricUnified.{attr} missing")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing database models: {e}")
        traceback.print_exc()
        return False

def test_main_router():
    """Test that the main router includes AI endpoints"""
    try:
        print("\nTesting main router...")
        
        from backend.api.v1.router import api_router
        print("‚úÖ Main API router imported successfully")
        
        # Check all routes
        all_routes = []
        for route in api_router.routes:
            if hasattr(route, 'path'):
                all_routes.append(route.path)
            elif hasattr(route, 'path_regex'):
                # For mounted sub-routers
                prefix = getattr(route, 'path', '')
                if hasattr(route, 'app') and hasattr(route.app, 'routes'):
                    for sub_route in route.app.routes:
                        if hasattr(sub_route, 'path'):
                            all_routes.append(f"{prefix}{sub_route.path}")
        
        print(f"‚úÖ Found {len(all_routes)} total routes")
        
        # Look for AI routes
        ai_routes = [route for route in all_routes if '/ai/' in route or route.startswith('/ai')]
        print(f"‚úÖ Found {len(ai_routes)} AI routes:")
        for route in ai_routes:
            print(f"   - {route}")
            
        return len(ai_routes) > 0
        
    except Exception as e:
        print(f"‚ùå Error testing main router: {e}")
        traceback.print_exc()
        return False

def test_fastapi_app():
    """Test that the FastAPI app includes AI endpoints"""
    try:
        print("\nTesting FastAPI app...")
        
        from main import app
        print("‚úÖ FastAPI app imported successfully")
        
        # Get all routes from the app
        all_routes = []
        for route in app.routes:
            if hasattr(route, 'path'):
                all_routes.append(route.path)
            elif hasattr(route, 'path_regex') and hasattr(route, 'app'):
                # For mounted sub-routers
                prefix = getattr(route, 'path', '')
                if hasattr(route.app, 'routes'):
                    for sub_route in route.app.routes:
                        if hasattr(sub_route, 'path'):
                            full_path = f"{prefix.rstrip('/')}{sub_route.path}"
                            all_routes.append(full_path)
        
        print(f"‚úÖ Found {len(all_routes)} total app routes")
        
        # Look for AI routes
        ai_routes = [route for route in all_routes if '/ai/' in route or '/ai' in route]
        print(f"‚úÖ Found {len(ai_routes)} AI routes in app:")
        for route in ai_routes:
            print(f"   - {route}")
            
        return len(ai_routes) > 0
        
    except Exception as e:
        print(f"‚ùå Error testing FastAPI app: {e}")
        traceback.print_exc()
        return False

def test_ai_endpoint_functions():
    """Test that AI endpoint functions can be called"""
    try:
        print("\nTesting AI endpoint functions...")
        
        from backend.api.v1.endpoints.ai_insights import (
            test_ai_endpoint,
            get_health_score,
            get_health_insights,
            get_goal_recommendations,
            get_achievements,
            get_coaching_messages
        )
        
        print("‚úÖ AI endpoint functions imported successfully")
        
        # Test the test endpoint (synchronous)
        result = asyncio.run(test_ai_endpoint())
        if result and 'message' in result:
            print("‚úÖ test_ai_endpoint function works")
        else:
            print("‚ùå test_ai_endpoint function failed")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing AI endpoint functions: {e}")
        traceback.print_exc()
        return False

def test_dependencies():
    """Test that all required dependencies are available"""
    try:
        print("\nTesting dependencies...")
        
        import pandas as pd
        print("‚úÖ pandas imported successfully")
        
        import numpy as np
        print("‚úÖ numpy imported successfully")
        
        from sqlalchemy.orm import Session
        print("‚úÖ sqlalchemy imported successfully")
        
        from fastapi import APIRouter, Depends, HTTPException, Query
        print("‚úÖ fastapi imported successfully")
        
        from pydantic import BaseModel
        print("‚úÖ pydantic imported successfully")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error testing dependencies: {e}")
        traceback.print_exc()
        return False

if __name__ == "__main__":
    print("üß™ Comprehensive AI Endpoints Testing\n")
    
    success = True
    success &= test_dependencies()
    success &= test_database_models()
    success &= test_ai_imports()
    success &= test_ai_engine_initialization()
    success &= test_main_router()
    success &= test_fastapi_app()
    success &= test_ai_endpoint_functions()
    
    print(f"\n{'‚úÖ All tests passed!' if success else '‚ùå Some tests failed!'}")
    
    if success:
        print("\nüéâ AI endpoints are ready for Phase 5 testing!")
        print("Next steps:")
        print("1. Start the backend server: uvicorn main:app --reload")
        print("2. Test endpoints at: http://localhost:8000/docs")
        print("3. Verify AI endpoints under /ai/ section")
    else:
        print("\nüîß Please fix the failing tests before proceeding to Phase 5")
    
    sys.exit(0 if success else 1) 