{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Health &amp; Fitness Analytics Documentation","text":"<p>This site provides comprehensive documentation for the Health &amp; Fitness Analytics platform.</p>"},{"location":"#key-sections","title":"Key Sections","text":"<ul> <li>Architecture</li> <li>Backend</li> <li>Frontend</li> <li>Data Integrations</li> <li>AI &amp; Analytics</li> <li>Security</li> <li>Testing</li> <li>Deployment</li> <li>Code Style</li> <li>Environment Setup</li> <li>Best Practices</li> </ul> <p>Use the navigation bar to explore all documentation topics. </p>"},{"location":"ai_analytics/","title":"AI &amp; Analytics","text":""},{"location":"ai_analytics/#overview","title":"Overview","text":"<p>The platform uses AI/ML to identify trends, generate insights, and power a chat interface for personal coaching.</p>"},{"location":"ai_analytics/#features","title":"Features","text":"<ul> <li>Trend detection on health metrics</li> <li>Personalized recommendations</li> <li>Chat interface with AI trainer/dietician</li> </ul>"},{"location":"ai_analytics/#implementation","title":"Implementation","text":"<ul> <li>Data preprocessing and feature engineering</li> <li>Model training and inference (TBD)</li> <li>Integration with backend APIs</li> </ul>"},{"location":"ai_analytics/#future-work","title":"Future Work","text":"<ul> <li>Expand AI capabilities</li> <li>User feedback loop</li> </ul> <p>See <code>architecture.md</code> for system context. </p>"},{"location":"architecture/","title":"System Architecture","text":""},{"location":"architecture/#overview","title":"Overview","text":"<p>This document describes the overall architecture of the Health &amp; Fitness Analytics platform, including backend, frontend, data integrations, and cloud deployment.</p>"},{"location":"architecture/#components","title":"Components","text":"<ul> <li>Backend: FastAPI, SQLAlchemy, Alembic, PostgreSQL</li> <li>Frontend: React, TypeScript, Vite</li> <li>Data Integrations: Apple Health, Withings, CSV</li> <li>AI/Analytics: Trend detection, chat interface</li> <li>Deployment: GCP, Docker</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<ol> <li>Data is ingested from Apple Health, Withings, and CSV uploads.</li> <li>Data is stored in a normalized PostgreSQL schema.</li> <li>Backend exposes RESTful APIs for CRUD, sync, and analytics.</li> <li>Frontend consumes APIs for visualization and user interaction.</li> <li>AI/analytics modules process data for insights and chat responses.</li> </ol>"},{"location":"architecture/#component-relationships","title":"Component Relationships","text":"<ul> <li>Data sources \u2192 Backend \u2192 Database</li> <li>Backend \u2192 Frontend (API)</li> <li>Backend \u2192 AI/Analytics</li> <li>Frontend \u2192 User</li> </ul> <p>See other docs for details on each component. </p>"},{"location":"backend/","title":"Backend","text":""},{"location":"backend/#overview","title":"Overview","text":"<p>The backend is built with FastAPI, SQLAlchemy, and Alembic, using PostgreSQL for data storage. Poetry manages dependencies.</p>"},{"location":"backend/#structure","title":"Structure","text":"<ul> <li>API: RESTful endpoints for authentication, users, health metrics, goals, and data sources</li> <li>Models: SQLAlchemy ORM models for users, metrics, goals, data sources, sync logs</li> <li>Data Sources: Integrations for Apple Health, Withings, and CSV</li> <li>Sync Logic: Scheduled and manual sync, OAuth2 flows, data mapping</li> </ul>"},{"location":"backend/#key-patterns","title":"Key Patterns","text":"<ul> <li>JWT authentication</li> <li>Modular API routers</li> <li>Alembic migrations</li> <li>Environment-based config</li> </ul> <p>See <code>architecture.md</code> and <code>data_integrations.md</code> for more. </p>"},{"location":"best_practices/","title":"Best Practices","text":""},{"location":"best_practices/#general-engineering","title":"General Engineering","text":"<ul> <li>Write clear, maintainable code</li> <li>Document decisions and patterns</li> <li>Use version control effectively</li> <li>Keep dependencies up to date</li> <li>Automate repetitive tasks</li> </ul>"},{"location":"best_practices/#project-specific","title":"Project-Specific","text":"<ul> <li>Normalize all health data to internal schema</li> <li>Use scheduled syncs for external data</li> <li>Secure all API endpoints</li> <li>Test integrations thoroughly</li> <li>Monitor for data sync errors</li> </ul>"},{"location":"best_practices/#collaboration","title":"Collaboration","text":"<ul> <li>Use clear commit messages</li> <li>Review code before merging (if team grows) </li> </ul>"},{"location":"code_style/","title":"Code Style","text":""},{"location":"code_style/#python","title":"Python","text":"<ul> <li>Follow PEP8</li> <li>Use <code>black</code> for formatting</li> <li>Use <code>ruff</code> for linting</li> <li>Type annotations where possible</li> <li>Descriptive variable and function names</li> </ul>"},{"location":"code_style/#typescriptreact","title":"TypeScript/React","text":"<ul> <li>Use <code>Prettier</code> for formatting</li> <li>Use <code>ESLint</code> for linting</li> <li>Functional components</li> <li>Consistent naming (camelCase for variables/functions, PascalCase for components)</li> <li>Keep components small and focused</li> </ul>"},{"location":"code_style/#general","title":"General","text":"<ul> <li>Write docstrings/comments for clarity</li> <li>Organize imports</li> <li>Maintain consistent folder structure </li> </ul>"},{"location":"data_integrations/","title":"Data Integrations","text":""},{"location":"data_integrations/#overview","title":"Overview","text":"<p>This document covers integration with Apple Health, Withings, and CSV nutrition data.</p>"},{"location":"data_integrations/#apple-health","title":"Apple Health","text":"<ul> <li>Metrics: Steps, energy, exercise, sleep, cardio fitness, heart rate</li> <li>Sync: Manual/automated, OAuth2 (if applicable), data mapping</li> </ul>"},{"location":"data_integrations/#withings","title":"Withings","text":"<ul> <li>Metrics: Weight, body composition</li> <li>Sync: OAuth2, scheduled/manual, data mapping</li> </ul>"},{"location":"data_integrations/#csv-nutrition","title":"CSV Nutrition","text":"<ul> <li>Metrics: Calories, carbs, protein, fats</li> <li>Sync: File upload, parsing, mapping</li> </ul>"},{"location":"data_integrations/#data-mapping","title":"Data Mapping","text":"<ul> <li>All data normalized to internal schema</li> <li>Sync logs and error handling</li> </ul> <p>See <code>backend.md</code> for implementation details. </p>"},{"location":"deployment/","title":"Deployment","text":""},{"location":"deployment/#overview","title":"Overview","text":"<p>This document covers deployment to Google Cloud Platform (GCP) using Docker and documentation deployment to GitHub Pages.</p>"},{"location":"deployment/#steps","title":"Steps","text":"<ol> <li>Build Docker images for backend and frontend</li> <li>Push images to GCP Container Registry</li> <li>Configure GCP services (Cloud Run, SQL, etc.)</li> <li>Set environment variables and secrets</li> <li>Run database migrations (Alembic)</li> </ol>"},{"location":"deployment/#documentation-deployment","title":"Documentation Deployment","text":"<ul> <li>Build and deploy docs to GitHub Pages: <code>mkdocs gh-deploy</code></li> <li>Docs will be available at <code>https://&lt;your-github-username&gt;.github.io/&lt;your-repo-name&gt;/</code></li> </ul>"},{"location":"deployment/#local-development","title":"Local Development","text":"<ul> <li>Use Docker Compose for local stack</li> <li>See <code>env_setup.md</code> for details</li> </ul>"},{"location":"deployment/#best-practices","title":"Best Practices","text":"<ul> <li>Automate deployments</li> <li>Use separate environments (dev, prod)</li> <li>Monitor and log deployments </li> </ul>"},{"location":"env_setup/","title":"Environment Setup","text":""},{"location":"env_setup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.10+</li> <li>Node.js 18+</li> <li>Poetry (for Python deps)</li> <li>Docker (for local stack)</li> <li>MkDocs (for documentation)</li> </ul>"},{"location":"env_setup/#setup-steps","title":"Setup Steps","text":"<ol> <li>Clone the repo</li> <li><code>cd health-fitness-analytics</code></li> <li><code>poetry install</code> (backend)</li> <li><code>cd frontend &amp;&amp; npm install</code> (frontend)</li> <li>Copy <code>.env.example</code> to <code>.env</code> and set variables</li> <li><code>docker compose up</code> to start local stack</li> </ol>"},{"location":"env_setup/#documentation","title":"Documentation","text":"<ul> <li>Install MkDocs and Material theme: <code>pip install mkdocs-material</code></li> <li>Serve docs locally: <code>mkdocs serve</code></li> <li>Build static site: <code>mkdocs build</code></li> <li>Deploy to GitHub Pages: <code>mkdocs gh-deploy</code></li> </ul>"},{"location":"env_setup/#environment-variables","title":"Environment Variables","text":"<ul> <li>See <code>.env.example</code> for required variables</li> <li>Never commit secrets </li> </ul>"},{"location":"frontend/","title":"Frontend","text":""},{"location":"frontend/#overview","title":"Overview","text":"<p>The frontend is built with React, TypeScript, and Vite. It provides dashboards, charts, and a chat interface for health analytics.</p>"},{"location":"frontend/#structure","title":"Structure","text":"<ul> <li>Components: Modular React components for metrics, charts, chat, and settings</li> <li>State Management: Context API and custom hooks</li> <li>Services: API calls, authentication, data fetching</li> <li>Assets: Static files and styles</li> </ul>"},{"location":"frontend/#key-patterns","title":"Key Patterns","text":"<ul> <li>Functional components</li> <li>TypeScript for type safety</li> <li>Responsive design</li> </ul> <p>See <code>architecture.md</code> for how frontend fits into the system. </p>"},{"location":"security/","title":"Security","text":""},{"location":"security/#overview","title":"Overview","text":"<p>Security is a core focus, covering authentication, secrets management, and user data protection.</p>"},{"location":"security/#authentication","title":"Authentication","text":"<ul> <li>JWT for API authentication</li> <li>OAuth2 for data sources (Withings, Apple Health)</li> </ul>"},{"location":"security/#secrets-management","title":"Secrets Management","text":"<ul> <li>Use environment variables for secrets</li> <li>Never commit secrets to version control</li> </ul>"},{"location":"security/#data-protection","title":"Data Protection","text":"<ul> <li>Store sensitive data encrypted (e.g., tokens)</li> <li>Use HTTPS for all endpoints</li> <li>Regular dependency updates</li> </ul>"},{"location":"security/#best-practices","title":"Best Practices","text":"<ul> <li>Principle of least privilege</li> <li>Regular audits</li> <li>Secure coding standards </li> </ul>"},{"location":"testing/","title":"Testing","text":""},{"location":"testing/#overview","title":"Overview","text":"<p>Testing ensures reliability and maintainability for both backend and frontend.</p>"},{"location":"testing/#backend","title":"Backend","text":"<ul> <li>Use <code>pytest</code> for unit and integration tests</li> <li>Coverage reporting with <code>pytest-cov</code></li> <li>Test database setup for isolation</li> </ul>"},{"location":"testing/#frontend","title":"Frontend","text":"<ul> <li>Use <code>Jest</code> and <code>React Testing Library</code></li> <li>Component and integration tests</li> <li>Mock API calls</li> </ul>"},{"location":"testing/#ci-integration","title":"CI Integration","text":"<ul> <li>Run tests on every PR/commit (CI setup TBD)</li> </ul>"},{"location":"testing/#best-practices","title":"Best Practices","text":"<ul> <li>Write tests for new features and bugfixes</li> <li>Maintain high coverage</li> <li>Use fixtures and mocks for isolation </li> </ul>"}]}